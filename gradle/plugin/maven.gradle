apply plugin: 'maven'

def customGradleScript = 'custom.gradle'
if(new File("gradle/plugin/$customGradleScript").exists()){
    apply from: "../gradle/plugin/$customGradleScript"
}

configurations.archives {
    extendsFrom configurations.default
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from {
        project.extensions.findByName("android") != null ? android.sourceSets.main.java.sourceFiles : sourceSets.main.allSource
    }
}

artifacts {
    archives sourcesJar
}

//noinspection GroovyAssignabilityCheck
uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
        if (!project.hasProperty('teamcity.build.id')) localProperties()
        repository(url: getDeploymentUrl()) {
            authentication(userName: project.findProperty("nexusUser"), password: project.findProperty("nexusPassword"))
        }

        pom.project {
            name = project.name
            version = project.version
            packaging = getPackaging()
        }
    }
}

task installLocal(type: Exec, dependsOn: assemble) {
    executable "mvn"
    args "install:install-file"
    args "-Dfile=${getArtifactPath()}"
    args "-DgroupId=${project.group}"
    args "-DartifactId=${project.name}"
    args "-Dversion=${project.version}"
    args "-Dpackaging=${getPackaging()}"
}

def getDeploymentUrl() {
    def stableRepo = project.findProperty("nexusUrl") + 'releases'
    def snapshotRepo = project.findProperty("nexusUrl") + 'snapshots'
    rootProject.isRelease ? stableRepo : snapshotRepo
}

def getPackaging() {
    if (project.plugins.hasPlugin('com.android.library')) {
        return 'aar'
    } else {
        return 'jar'
    }
}

def getArtifactPath() {
    if (getPackaging() == "aar") {
        return "build/outputs/aar/${project.name}-debug.${getPackaging()}"
    } else {
        return "build/libs/${project.name}-${getVersion()}.${getPackaging()}"
    }
}

def localProperties() {
    Properties properties = new Properties()
    properties.load(file(rootProject.file("local.properties")).newDataInputStream())
    properties.each {
        project.ext.set(it.key, it.value)
    }
}